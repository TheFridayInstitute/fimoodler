% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_con.R
\name{dbcon}
\alias{dbcon}
\alias{create_db_con}
\alias{start_db_session}
\alias{end_db_session}
\alias{get_session_con}
\alias{set_session_con}
\title{Connect to Moodle database}
\usage{
create_db_con(host, port, dbname, username, password = getPass::getPass(msg =
  "Database password:"), driver = RMySQL::MySQL())

start_db_session(host, port, dbname, username, password = getPass::getPass(msg
  = "Database password:"), driver = RMySQL::MySQL())

end_db_session()

get_session_con()

set_session_con(con)
}
\arguments{
\item{host}{The address of the database host.}

\item{port}{The port on which to access the database.}

\item{dbname}{The name of the database to access.}

\item{username}{Your username to access the database.}

\item{password}{Your password to access the database. Generally, passwords
should not be saved in plain text code files. Thus, the default is to
prompt the user interactively.}

\item{driver}{Driver specifying communication protocol for the type of
database being used. See dbplyr for supported databases.}

\item{con}{A database connection object.}
}
\value{
\code{create_db_con} returns a dbplyr pool connection object.

\code{start_db_session} silently returns the old, closed session
  connection, or NULL if there was not a previous connection.

\code{end_db_session} silently returns the session connection after
  closing it, or NULL if there was no connection.

\code{get_session_con} returns the current session's connection
  object.

\code{set_session_con} returns the previous session's connection
  object after replacing the session connection.
}
\description{
These are functions for opening and closing database connections.  A
\strong{session} is a convenience that keeps track of a connection for you,
so you don't have to pass it to function calls.  However, you can create a
connection object outside of a session if you wish.
}
\details{
These functions are wrappers around dbplyr and pool objects.  These
underlying tools neatly open and close individual connections as needed and
translate queries into a variety of different database lanaguages, so the
code is database-independent.

You do not need to open and close connections constantly.  You can leave a
connection open as long as you want (unless the database kicks you off), but
it's best to close it when you are done for the day.
}
\examples{
\dontrun{

## Start a session that will pass connection object for you

# You will be prompted for password
start_db_session(
  host = "localhost",
  port = 3306,
  dbname = "moodle",
  username = "moodle-ro"
)

# Do a bunch of stuff
fetch_enrolled_users(72)

# End the session when you are done for the day
end_db_session()

## Create pool connection object you will pass yourself

# You will be prompted for password
con <- create_db_con(
  host = "localhost",
  port = 3306,
  dbname = "moodle",
  username = "moodle-ro"
)

# Do a bunch of stuff
fetch_enrolled_users(72, con = con)

# Close the connection when you are done for the day
pool::poolClose(con)
}
}
